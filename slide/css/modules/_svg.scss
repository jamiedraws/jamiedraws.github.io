@import "extend";
@import "colors";
@import "animation-fade";

@mixin css-tailspin() {
	@-webkit-keyframes svg-tailspin {
		from {
			-webkit-transform: rotate(0deg);
		}
		to {
			-webkit-transform: rotate(360deg);
		}
	}

	@keyframes svg-tailspin {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}
}

@mixin css-cross() {
	@-webkit-keyframes svg-cross {
		from {
			opacity: 0;
			transform: scale(0.7);
		}
		to {
			opacity: 1;
			transform: scale(1);
		}
	}

	@keyframes svg-cross {
		from {
			opacity: 0;
			transform: scale(0.7);
		}
		to {
			opacity: 1;
			transform: scale(1);
		}
	}
}

@mixin svg-tailspin($conf: ()) {
	$conf: extend(
		(
			size: 3em,
			fill: white,
			stroke: false,
			iterate: 30,
			delay: 0.1s,
			ondemand: false
		),
		$conf
	);

	$duration: 0.7;
	$iterate: map-get($conf, iterate);
	$timeout: $duration * $iterate / 2;

	$stroke: map-get($conf, stroke);
	$fill: map-get($conf, fill);

	@if not $stroke {
		$stroke: none;
	} @else {
		$stroke: get-hsla($fill, 1, true);
	}

	@if not $fill {
		$fill: none;
	} @else {
		$fill: get-hsla($fill, 1, true);
	}

	display: block;
	padding: 2em;
	-webkit-transform-origin: center center;
	transform-origin: center center;
	will-change: transform;
	opacity: 0;

	-webkit-animation: fade-in #{map-get($conf, delay)} ease-in forwards,
		svg-tailspin #{$duration}s cubic-bezier(0.5, 0.4, 0.5, 0.6) #{$iterate},
		fade-out #{$timeout}s ease-in #{$timeout}s forwards;
	animation: fade-in #{map-get($conf, delay)} ease-in forwards,
		svg-tailspin #{$duration}s cubic-bezier(0.5, 0.4, 0.5, 0.6) #{$iterate},
		fade-out #{$timeout}s ease-in #{$timeout}s forwards;

	@if not(map-get($conf, ondemand)) {
		animation-play-state: paused;
	}

	background: url("data:image/svg+xml;charset=utf8,\
    %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E\
        %3Cpath stroke='#{$stroke}' d='M10 50A40 40 0 0 0 90 50A40 42 0 0 1 10 50' fill='#{$fill}'%3E%3C/path%3E\
    %3C/svg%3E")
		no-repeat center center;
	background-size: #{map-get($conf, size)};
	width: #{map-get($conf, size)};
	height: #{map-get($conf, size)};
}

@mixin svg-cross($conf: ()) {
	$conf: extend(
		(
			size: 2em,
			fill: white,
			duration: 0.3s,
			stroke: false
		),
		$conf
	);

	$stroke: map-get($conf, stroke);
	$fill: map-get($conf, fill);

	@if not $stroke {
		$stroke: none;
	} @else {
		$stroke: get-hsla($fill, 1, true);
	}

	@if not $fill {
		$fill: none;
	} @else {
		$fill: get-hsla($fill, 1, true);
	}

	display: block;
	padding: 2em;
	-webkit-transform-origin: center center;
	transform-origin: center center;
	opacity: 0;

	-webkit-animation: svg-cross #{map-get($conf, duration)} cubic-bezier(
			0.19,
			1,
			0.22,
			1
		) forwards;
	animation: svg-cross #{map-get($conf, duration)} cubic-bezier(
			0.19,
			1,
			0.22,
			1
		) forwards;

	background: url("data:image/svg+xml;charset=utf8,\
    %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 612 612' preserveAspectRatio='xMidYMid'%3E\
        %3Cpolygon stroke='#{$stroke}' points='612,36.004 576.521,0.603 306,270.608 35.478,0.603 0,36.004 270.522,306.011 0,575.997 35.478,611.397 306,341.411 576.521,611.397 612,575.997 341.459,306.011' fill='#{$fill}'/%3E\
    %3C/svg%3E")
		no-repeat center center;
	background-size: #{map-get($conf, size)};
	width: #{map-get($conf, size)};
	height: #{map-get($conf, size)};
}
